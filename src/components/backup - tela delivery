<template>
  <div class="topo">
    <div id="basico">
      <div id="tamanho" v-if="escolherTamanho">
        <div id="caixa-tamanho">
          <div @click="mudar('Exagerada')" id="img-tamanho">
            <img src="../imagens/Exagerada.png" id="img-ings" />
          </div>
          <div @click="mudar('Grande')" id="img-tamanho">
            <img src="../imagens/Grande.png" id="img-ings" />
          </div>
          <div @click="mudar('Media')" id="img-tamanho">
            <img src="../imagens/Media.png" id="img-ings" />
          </div>
          <div @click="mudar('Pequena')" id="img-tamanho">
            <img src="../imagens/Pequena.png" id="img-ings" />
          </div>
        </div>
      </div>
      <div v-if="escolherSabores == false" class="scroll">
        <div v-for="sabor in sabores" :key="sabor.id" class="sabi">
          <div class="cb-pizza">
            <button class="button-ex" @click="exSabor(sabor.id, sabor.nome)">-</button>
            <button class="button-add" @click="addSabor(sabor.id, sabor.nome)">+</button>
            {{sabor.nome}}
            <br />
            <br />
            R$ {{sabor.preco}}
          </div>
        </div>
      </div>
      <!-- outros produtos -->
      <div v-if="outrosProdutos == false" class="scroll">
        <div v-for="prod in outrosProds" :key="prod.id" class="sabi">
          <div class="cb-pizza">
            <button class="button-ex" @click="exOutro(prod.id, prod.nome)">-</button>
            <button class="button-add" @click="addOutro(prod.id, prod.nome)">+</button>
            {{prod.nome}}
            <br />
            <br />
            R$ {{prod.preco}}
          </div>
        </div>
      </div>

      <transition name="transi">
        <div v-if="pagar == false" id="midt">
          <img src="../imagens/supermercado.png" id="imgg" />
          <div id="carrinhor">Carrinho de compras</div>
          <div v-for="item in itens" :key="item">
          <div id="pizz">Pizza: </div>
            <br />
            {{item}}
            <br />
            <div v-for="sab in saboresEscolhidos" :key="sab">{{sab}}</div>
            <!-- {{nome cliente}}
        {{rua}}
        {{produtos}}
            {{total}}-->
            <div id="separa"></div>
               <div id="pizz">Outros: </div>
            <div v-for="out in outrosP" :key="out">
              {{out}}
            </div>
          </div>
          <div class="totales">
            {{"Total: R$ "+ this.valorFinal}}
            <button
              class="but"
              id="btn-pagar"
              @click="pagamento"
            >Pagar</button>
          </div>
        </div>
      </transition>
      <div v-if="escolherSabores == false" class="bots">
        <button id="butt" class="but" @click="maisPizza()">Pedir mais pizzas</button>
        <button class="but" @click="outros()">Outros produtos</button>
        <button class="but" @click="finalizar()">Ir Finalizar</button>
        <label v-if="saborSelec == false">Ao menos 1 Sabor deve ser selecionado!</label>
      </div>
      <div v-if="outrosProdutos == false" class="bots1">
        <button @click="voltaSabor()" class="but">Voltar</button>
      </div>
    </div>

    <div id="carrinho">
      <h2>Acompanhe seu pedido!</h2>
      <div id="separa"></div>
      <div id="itens" v-for="item in itens" :key="item">
        <label>{{item}}</label>
        <div v-for="sab in saboresEscolhidos" :key="sab">{{sab}}</div>
        <br />
        <div id="separa"></div>
        <div v-for="out in outrosP" :key="out">{{out}}</div>
        <div>{{valorFinal}}</div>
      </div>
    </div>
  </div>
</template>

<script>
const axios = require("axios");
export default {
  data: function() {
    return {
      medidas: [],
      sabores: [],
      cliente: [],
      saborSelec: true,
      entregadores: [],
      escolherTamanho: true,
      imagens_tamanho: [],
      saboresFinal: [],
      escolherSabores: true,
      outrosProdutos: true,
      aparecer: false,
      todoSabores: [],
      mesmoSabor: 0,
      outrosP: [],
      idPedido: 0,
      outrosPagar: [],
      outrosProds: [],
      saboresEscolhidos: [],
      todosProdutos: [],
      valorPedido: [],
      soma: 0,
      pagar: true,
      escolhidos: [],
      valorFinal: 0,
      itens: []
    };
  },
  methods: {
    mudar: function(nome) {
      this.filtrar(nome);
      this.escolherTamanho = false;
      this.itens.push(nome);
      this.escolherSabores = false;
    },
    voltaSabor: function() {
      this.escolherSabores = false;
      this.outrosProdutos = true;
    },
    maisPizza: function(){
      console.log(this.saboresEscolhidos)
      if(this.saboresEscolhidos.length > 0){
        this.escolherTamanho = true;
        this.escolherSabores = true;
      }else{
        alert("Escolha ao menos 1 sabor para estÃ¡ pizza!")
      }
    },
    pagamento: function() {
      var repetido = [...new Set(this.escolhidos)];
      var entregador = this.entregadores[
        Math.floor(Math.random() * this.entregadores.length)
      ];
      var repetido2 = [...new Set(this.outrosPagar)];
      var junta = repetido.concat(repetido2)
      axios
        .post("http://localhost:55537/api/Pedidos", {
          id_cliente: this.cliente[0].id,
          id_entregador: entregador,
          processamento: false
        })
        .then(
          res => (this.idPedido = res.data),
          setTimeout(() => {
            junta.forEach(u => {
              axios.post("http://localhost:55537/api/Itens_Pedido", {
                id_produto: u,
                id_pedido: this.idPedido,
                quantidade: 1
              });
            });
          }, 2000)
        );
      alert("Pago com sucesso!");
      this.pagar = true;
      this.outrosP = []
      this.outrosPagar = []
      this.escolherTamanho = true;
      this.itens = [];
      this.saboresEscolhidos = [];
      this.valorFinal = 0;
    },
    exOutro: function(id, nome) {
      var valor = 0;
      this.todoSabores.filter(u => {
        if (u.id == id) {
          valor = u.preco;
        }
      });
      this.outrosPagar.forEach(u => {
        if (u == id) {
          this.outrosPagar.splice(this.outrosPagar.indexOf(id), 1);
          this.outrosP.splice(this.outrosP.indexOf(nome), 1);
          this.valorFinal -= valor;
        }
      });
    },
    addOutro: function(id, nome) {
      this.outrosPagar.push(id);
      this.outrosP.push(nome);
      this.todoSabores.forEach(u => {
        if (u.id == id) {
          this.valorFinal += u.preco;
        }
      });
    },
    pagarPedido: function() {},
    finalizar: function() {
      this.saborSelec = true;
      if (this.escolhidos.length > 0) {
        // this.valor();
        if (this.valorFinal != 0) {
          var repetido = [...new Set(this.saboresEscolhidos)];
          this.saboresEscolhidos = [];
          this.saboresEscolhidos = repetido;
          var cli = sessionStorage.getItem("usuarioLogado");
          this.cliente.push(JSON.parse(cli));
          this.escolherSabores = true;
          this.pagar = false;
        }
      } else {
        this.saborSelec = false;
      }
    },
    outros: function() {
      this.saborSelec = true;
      console.log(this.escolhidos);
      if (this.escolhidos.length > 0) {
        this.carregaOutros();
        this.escolherSabores = true;
        this.outrosProdutos = false;
      } else {
        this.saborSelec = false;
      }
    },
    filtrar: function(nomeCat) {
      setTimeout(() => {
        this.todoSabores.filter(u => {
          if (u.categoriaProd == "Pizzas" && u.nomeMedida == nomeCat) {
            this.sabores.push(u);
          }
        });
      }, 300);
    },
    carregaOutros: function() {
      console.log(this.todoSabores);
      setTimeout(() => {
        this.todoSabores.filter(u => {
          if (u.categoriaProd != "Pizzas") {
            this.outrosProds.push(u);
          }
        });
      }, 500);
      console.log(this.outrosProds);
    },
    valor: function() {
      if (this.itens == "Exagerada") {
        this.valorFinal = 50;
        var aux = 0;
        var repetido = [...new Set(this.escolhidos)];
        console.log(repetido);
        this.todoSabores.forEach(e => {
          if (e.id == repetido[aux]) {
            if (this.valorFinal < e.preco) {
              this.valorFinal = e.preco;
            }
            aux++;
          }
        });
        console.log(this.valorFinal);
      }
      if (this.itens == "Grande") {
        this.valorFinal = 40;
        var aux1 = 0;
        var repetido1 = [...new Set(this.escolhidos)];
        console.log(repetido1);
        this.todoSabores.forEach(e => {
          if (e.id == repetido1[aux1]) {
            if (this.valorFinal < e.preco) {
              this.valorFinal = e.preco;
            }
            aux1++;
          }
        });
        console.log(this.valorFinal);
      }
      if (this.itens == "Media") {
        this.valorFinal = 35;
        var aux2 = 0;
        var repetido2 = [...new Set(this.escolhidos)];
        console.log(repetido2);
        this.todoSabores.forEach(e => {
          if (e.id == repetido2[aux2]) {
            if (this.valorFinal < e.preco) {
              this.valorFinal = e.preco;
            }
            aux2++;
          }
        });
        console.log(this.valorFinal);
      }
      if (this.itens == "Pequena") {
        this.valorFinal = 25;
        var aux3 = 0;
        var repetido3 = [...new Set(this.escolhidos)];
        console.log(repetido3);
        this.todoSabores.forEach(e => {
          if (e.id == repetido3[aux3]) {
            if (this.valorFinal < e.preco) {
              this.valorFinal = e.preco;
            }
            aux3++;
          }
        });
        console.log(this.valorFinal);
      }
    },
    addSabor: function(sabor, nome) {
      var nomeSabor = nome
        .replace("Pizza de", "")
        .replace("Pizza ", "")
        .trim();
      this.saboresEscolhidos.forEach(e => {
        if (e == nomeSabor) {
          this.mesmoSabor = 1;
        }
      });
      if (this.itens == "Exagerada") {
        if (this.saboresEscolhidos.length < 4) {
          this.saboresEscolhidos.push(nomeSabor);
          this.escolhidos.push(sabor);
          console.log(this.escolhidos);
          if (this.saboresEscolhidos.length == 4) {
            this.aparecer = true;
          }
        }
      } else if (this.itens == "Grande") {
        if (this.saboresEscolhidos.length < 3) {
          this.saboresEscolhidos.push(nomeSabor);
          this.escolhidos.push(sabor);
          if (this.saboresEscolhidos.length == 3) {
            this.aparecer = true;
          }
        }
      } else if (this.itens == "Media") {
        if (this.saboresEscolhidos.length < 2) {
          this.saboresEscolhidos.push(nomeSabor);
          this.escolhidos.push(sabor);
          if (this.saboresEscolhidos.length == 2) {
            this.aparecer = true;
          }
        }
      } else if (this.itens == "Pequena") {
        if (this.saboresEscolhidos.length < 1) {
          this.saboresEscolhidos.push(nomeSabor);
          this.escolhidos.push(sabor);
          if (this.saboresEscolhidos.length == 1) {
            this.aparecer = true;
          }
        }
      }
      this.valor();
    },
    filtroEntregador(usuarios) {
      setTimeout(() => {
        usuarios.filter(u => {
          if (u.tipo_usuario == 3) {
            this.entregadores.push(u.id);
          }
        });
      }, 1000);
    },
    exSabor: function(sabor, nome) {
      var nomeSabor = nome.replace("Pizza de", "").trim();
      if (this.saboresEscolhidos.length > 0) {
        this.escolhidos.forEach(u => {
          if (u == sabor) {
            this.escolhidos.splice(this.escolhidos.indexOf(sabor), 1);
            console.log(this.escolhidos);
          }
        });
        this.saboresEscolhidos.forEach(u => {
          if (u == nomeSabor) {
            this.saboresEscolhidos.splice(
              this.saboresEscolhidos.indexOf(nomeSabor),
              1
            );
          }
        });
      }
      this.todoSabores.filter(u => {
        if (u.id == sabor) {
          this.valor();
        }
      });
    }
  },
  mounted() {
    axios
      .get("http://localhost:55537/api/Medida")
      .then(med => (this.medidas = med.data));
    axios
      .get("http://localhost:55537/api/Produto")
      .then(prod => (this.todoSabores = prod.data), this.carregaOutros());
    axios
      .get("http://localhost:55537/api/Usuario")
      .then(users => this.filtroEntregador(users.data));
  }
};
</script>

<style>
html,
body {
  width: 100%;
  height: 100%;
}

#carrinhor {
  margin-top: 10px;
  font-weight: bold;
}

#butt {
  margin-left: 40px;
}

.but {
  border-radius: 5px;
  margin: 10px;
  background-color: rgb(71, 71, 71);
  border: 2px solid rgb(49, 49, 49);
  outline: none;
  cursor: pointer;
  padding: 1%;
  color: white;
  -webkit-transition-duration: 0.3s;
  transition-duration: 0.3s;
}

.but:hover {
  background-color: rgb(26, 26, 26);
  transform: scale(1.05);
}

#btn-pagar {
  padding: 5px;
}

#tamanho {
  position: relative;
  height: 300px;
  width: 60%;
}
#caixa-tamanho {
  margin-top: 140px;
  margin-left: 65%;
  width: 500px;
  height: auto;
  display: flex;
  flex-wrap: wrap;
}
#img-tamanho {
  width: 200px;
  height: 200px;
  border: 3px solid black;
  border-radius: 20px;
  margin: 10px;
}
#img-ings {
  border-radius: 15px;
}
#carrinho {
  height: 475px;
  width: 275px;
  position: fixed;
  background: rgb(104, 104, 104);
  border-top-left-radius: 15px;
  border-bottom-left-radius: 15px;
  border: 2px solid black;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  /* margin: 95px 0px 0px 65%; */
  top: 95px;
  right: 0px;
  -webkit-box-shadow: 0px 7px 5px rgba(0, 0, 0, 0.77);
  -moz-box-shadow: 0px 7px 5px rgba(0, 0, 0, 0.77);
  box-shadow: 0px 7px 5px rgba(0, 0, 0, 0.77);
}
#separa {
  margin: 0px 0px 0px 10px;
  width: 90%;
  height: 4px;
  background: rgba(27, 27, 27, 0.534);
}
#itens {
  font-size: 16px;
  margin: 10px 0px 0px 5%;
  width: 90%;
  height: 75%;
}

.cb-pizza {
  padding: 10px;
  margin-top: 10px;
  background: rgb(0, 0, 0);
  box-shadow: 5px 10px 10px rgba(0, 0, 0, 0.3);
  color: white;
  width: 350px;
  height: 60px;
  position: relative;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  font-weight: 500;
}

.button-add {
  position: absolute;
  top: 0px;
  right: 2px;
  font-size: 24px;
  width: auto;
  height: auto;
  color: rgb(255, 255, 255);
  background: black;
  border: none;
  outline: none;
}

.button-ex {
  position: absolute;
  top: -4px;
  left: 2px;
  font-size: 30px;
  width: auto;
  height: auto;
  color: rgb(255, 255, 255);
  background: transparent;
  border: none;
  outline: none;
}
.scroll {
  margin: 90px 0px 0px 250px;
  height: 450px;
  width: 400px;
  overflow: auto;
}
.bots {
  margin: 0px 0px 0px 225px;
  text-align: left;
}
#midt {
  font-size: 20px;
  margin: 180px 0px 0px 150px;
  height: 350px;
  width: 500px;
  text-align: center;
  background: rgb(104, 104, 104);
  border-radius: 15px;
  border: 2px solid black;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  -webkit-box-shadow: 0px 7px 5px rgba(0, 0, 0, 0.77);
  -moz-box-shadow: 0px 7px 5px rgba(0, 0, 0, 0.77);
  box-shadow: 0px 7px 5px rgba(0, 0, 0, 0.77);
}

.totales {
  position: absolute;
  bottom: 0px;
  left: 320px;
}

#imgg {
  width: 70px;
  height: 70px;
  position: absolute;
  top: 190px;
  left: 170px;
}

.transi-enter-active {
  animation: tete 0.3s;
}

@keyframes tete {
  0% {
    transform: translate3d(0, -80px, 0);
  }
  100% {
    transform: translate3d(0, 0, 0);
  }
}
#pizz{
  margin: 0px;
}
</style>